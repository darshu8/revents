{"version":3,"sources":["service/todoservice.js","components/dashboard/task/task.js","components/dashboard/subtask/subtask.js","components/dashboard/dashboard.js","App.jsx","serviceWorker.js","index.js"],"names":["getAllTask","tasks","localStorage","getItem","setItem","JSON","parse","saveTask","task","taskList","push","stringify","Task","this","props","list","map","index","onClick","taskClickHandler","subtasks","class","name","Component","Subtask","Dashboard","clickHandler","subtask","setState","clear","state","bind","subtaskList","Fragment","App","Boolean","window","location","hostname","match","rootEl","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAEA,SAASA,IACT,IAAIC,EAAM,GAMV,OALkC,MAA/BC,aAAaC,QAAQ,UAAkD,KAAhCD,aAAaC,QAAQ,SAC3DD,aAAaE,QAAQ,QAAQ,IAE7BH,EAAMI,KAAKC,MAAMJ,aAAaC,QAAQ,UAEnCF,EAGP,SAASM,EAASC,GAClB,IAAIC,EAAST,IACbS,EAASC,KAAKF,GACdN,aAAaE,QAAQ,QAAQC,KAAKM,UAAUF,I,ICM7BG,E,uKAjBF,IAAD,OAEJ,OACE,6BAGMC,KAAKC,MAAMC,KAAKC,KAAI,SAACR,EAAMS,GAC3B,OAAO,yBAAKC,QAAS,kBAAI,EAAKJ,MAAMK,iBAAiBX,EAAKY,WAAWC,MAAM,QAApE,IAA4E,yBAAMA,MAAM,wBAAZ,IAAoC,4BAAI,2BAAIb,EAAKc,OAAjD,c,GAThFC,aCsBJC,E,kDArBX,WAAYV,GAAO,uCACTA,G,qDAGN,OACE,6BAISD,KAAKC,MAAMC,KAAKC,KAAI,SAACR,EAAMS,GAC3B,OAAO,yBAAKI,MAAM,QAAX,IAAmB,yBAAMA,MAAM,wBAAZ,IAAoC,4BAAI,2BAAIb,EAAKc,OAAjD,c,GAXvBC,aC8CPE,G,wDAxCX,WAAYX,GAAO,IAAD,uBACd,cAAMA,IAYVY,aAAe,SAACC,GACZ,EAAKC,SAAS,CAAC,YAAcD,KAX7BzB,aAAa2B,QACbtB,EAAS,CAAE,GAAM,EAAG,KAAQ,WAAY,SAAY,CAAE,CAAE,UAAa,EAAG,KAAQ,kBAAmB,aAAe,GAAS,CAAE,UAAa,EAAG,KAAQ,qBAAsB,aAAe,GAAQ,CAAE,UAAa,EAAG,KAAQ,WAAY,aAAe,MACvPA,EAAS,CAAE,GAAM,EAAG,KAAQ,UAAW,SAAY,CAAE,CAAE,UAAa,EAAG,KAAQ,cAAe,aAAe,GAAQ,CAAE,UAAa,EAAG,KAAQ,MAAO,aAAe,GAAS,CAAE,UAAa,EAAG,KAAQ,QAAS,aAAe,MAChOA,EAAS,CAAE,GAAM,EAAG,KAAQ,SAAU,SAAY,CAAE,CAAE,UAAa,EAAG,KAAQ,aAAc,aAAe,GAAS,CAAE,UAAa,EAAG,KAAQ,QAAS,aAAe,MAEtK,IAAIE,EAAST,IARC,OASd,EAAK8B,MAAM,CAAC,SAAWrB,EAAS,YAAc,IAC9C,EAAKiB,aAAaK,KAAlB,gBAVc,E,qDAiBT,IAAD,EAC4BlB,KAAKiB,MAA9BrB,EADH,EACGA,SAAUuB,EADb,EACaA,YACjB,OACI,kBAAC,IAAMC,SAAP,iBAEY,yBAAKZ,MAAM,cACR,4BAAQA,MAAM,UAAd,YACC,yBAAKA,MAAM,YACP,kBAAC,EAAD,CAAMN,KAAMN,EAAUU,iBAAkBN,KAAKa,iBAIrD,yBAAKL,MAAM,eACP,yBAAKA,MAAM,YACP,kBAAC,EAAD,CAASN,KAAMiB,W,GAhCvBT,cCKTW,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAAWC,SAASC,eAAe,QAGvCC,IAASC,OAAQ,kBAAC,EAAD,MAAQJ,GDyHrB,kBAAmBK,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1b39f253.chunk.js","sourcesContent":["\n\nfunction getAllTask(){\nvar tasks=[];\nif(localStorage.getItem(\"tasks\")==null || localStorage.getItem(\"tasks\")===\"\"){\n    localStorage.setItem(\"tasks\",[]);\n} else{\n    tasks=JSON.parse(localStorage.getItem(\"tasks\"));\n}\nreturn tasks;\n}\n\nfunction saveTask(task){\nvar taskList=getAllTask();\ntaskList.push(task);\nlocalStorage.setItem(\"tasks\",JSON.stringify(taskList));\n}\n\n\nexport {getAllTask, saveTask}","import React, { Component } from \"react\"\n\nclass Task extends Component{\n  \n    render(){\n       \n        return(\n          <div> \n              {\n                   \n                this.props.list.map((task, index) => {\n                return <div onClick={()=>this.props.taskClickHandler(task.subtasks)} class=\"card\"> <div  class=\"container text-color\"> <h4><b>{task.name}</b></h4> </div></div>\n                })\n            }\n          </div> \n\n        ) \n\n    }\n}\n\nexport default Task;","import React, { Component } from \"react\"\n\nclass Subtask extends Component{\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return(\n          <div>  \n              \n              {\n                   \n                   this.props.list.map((task, index) => {\n                   return <div class=\"card\"> <div  class=\"container text-color\"> <h4><b>{task.name}</b></h4> </div></div>\n                   })\n               }\n\n          </div> \n\n        ) \n\n    }\n}\n\nexport default Subtask;","import React, { Component } from \"react\"\nimport {getAllTask, saveTask}  from \"../../service/todoservice\"\nimport Task from \"./task/task\";\nimport Subtask from \"./subtask/subtask\";\n\nimport './dashboard.css';\n\nclass Dashboard extends Component{\n    constructor(props){\n        super(props)\n        debugger;\n        localStorage.clear()\n        saveTask({ \"id\": 1, \"name\": \"Homework\", \"subtasks\": [ { \"subTaskid\": 1, \"name\": \"Math Assignment\", \"isCompleted\": false }, { \"subTaskid\": 2, \"name\": \"Science Assignment\", \"isCompleted\": true }, { \"subTaskid\": 3, \"name\": \"History \", \"isCompleted\": true } ] })\n        saveTask({ \"id\": 1, \"name\": \"Grocery\", \"subtasks\": [ { \"subTaskid\": 1, \"name\": \"bring Fruit\", \"isCompleted\": true }, { \"subTaskid\": 2, \"name\": \"Oil\", \"isCompleted\": false }, { \"subTaskid\": 3, \"name\": \"Paper\", \"isCompleted\": true } ] })\n        saveTask({ \"id\": 1, \"name\": \"Office\", \"subtasks\": [ { \"subTaskid\": 1, \"name\": \"Send email\", \"isCompleted\": false }, { \"subTaskid\": 3, \"name\": \"Audit\", \"isCompleted\": true } ] })\n\n        var taskList=getAllTask()\n        this.state={\"taskList\":taskList,\"subtaskList\":[]};\n        this.clickHandler.bind(this)\n    }\n\n    clickHandler = (subtask) => {\n        this.setState({\"subtaskList\":subtask})    \n    }\n\n    render(){\n        const {taskList, subtaskList} = this.state;\n        return(\n            <React.Fragment>\n                TODO APP1\n                        <div class=\"split left\">\n                           <button class=\"button\">Add Task</button>\n                            <div class=\"centered\">\n                                <Task list={taskList} taskClickHandler={this.clickHandler}></Task>\n                            </div>\n                        </div>\n\n                        <div class=\"split right\">\n                            <div class=\"centered\">\n                                <Subtask list={subtaskList} ></Subtask>\n                            </div>\n                        </div>\n            </React.Fragment>\n        ) \n\n    }\n}\n\nexport default Dashboard;","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/dashboard/dashboard';\n\nfunction App() {\n  return (\n    <div>\n      <Dashboard></Dashboard>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst rootEl =   document.getElementById('root');\n\nlet render = ()=>{\n  ReactDOM.render( <App />,rootEl)\n}\n\nif(module.hot){\nmodule.hot.accept(\"./App\",()=>{\n  setTimeout(render)\n})\n}\n\nrender();\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}